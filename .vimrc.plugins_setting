
"-------------------------------------------------------------------------------
" Quickrun
"-------------------------------------------------------------------------------

" let g:quickrun_config = {}
"   " openblowserでブラウザ表示 + markdown
" let g:quickrun_config['markdown'] = {
"   \ 'type': 'markdown/kramdown',
"   \ 'outputter': 'browser'
"   \ }
" let g:quickrun_config['quickrun'] = {
"   \ 'outputter': 'browser'
"   \ }


"-------------------------------------------------------------------------------
" vimfiler
"-------------------------------------------------------------------------------
" 
"   " vimfilerをデフォルトファイラへ
"   let g:vimfiler_as_default_explorer = 1
"   " セーフモード OFF (削除やリネームをサクサクしたい)
"   let g:vimfiler_safe_mode_by_default = 0
"   " file_mruの表示フォーマットを指定。空にすると表示スピードが高速化される
"   " let g:unite_source_file_mru_filename_format = ''
"   let g:vimfiler_edit_action = 'tabopen'
"-------------------------------------------------------------------------------
" YankRing.vim
"-------------------------------------------------------------------------------

  " Yankの履歴参照
" nmap ,y ;YRShow<CR>


"-------------------------------------------------------------------------------
" Fugitive.vim
"-------------------------------------------------------------------------------

" nnoremap <Space>gd :<C-u>Gdiff<Enter>
" nnoremap <Space>gs :<C-u>Gstatus<Enter>
" nnoremap <Space>gl :<C-u>Glog<Enter>
" nnoremap <Space>ga :<C-u>Gwrite<Enter>
" nnoremap <Space>gc :<C-u>Gcommit<Enter>
" nnoremap <Space>gC :<C-u>Git commit --amend<Enter>
" nnoremap <Space>gb :<C-u>Gblame<Enter>


"-------------------------------------------------------------------------------
" Zen-Coding(Emmet)
"-------------------------------------------------------------------------------

let g:user_emmet_expandabbr_key = '<tab>'
let g:use_emmet_complete_tag = 1
let g:user_emmet_settings = {
  \  'lang' : 'ja',
  \  'html' : {
  \    'filters' : 'html',
  \    'indentation' : ' '
  \  },
  \  'php' : {
  \    'extends' : 'html',
  \    'filters' : 'html,c',
  \  },
  \  'css' : {
  \    'filters' : 'fc',
  \  },
  \  'javascript' : {
  \    'snippets' : {
  \      'jq' : "$(function() {\n\t${cursor}${child}\n});",
  \      'jq:each' : "$.each(arr, function(index, item)\n\t${child}\n});",
  \      'fn' : "(function() {\n\t${cursor}\n})();",
  \      'tm' : "setTimeout(function() {\n\t${cursor}\n}, 100);",
  \    },
  \  },
  \}




"-------------------------------------------------------------------------------
" LightLine
"-------------------------------------------------------------------------------

set showtabline=2
set laststatus=2
let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
        \ },
        \ 'component_function': {
        \   'modified': 'MyModified',
        \   'readonly': 'MyReadonly',
        \   'fugitive': 'MyFugitive',
        \   'filename': 'MyFilename',
        \   'fileformat': 'MyFileformat',
        \   'filetype': 'MyFiletype',
        \   'fileencoding': 'MyFileencoding',
        \   'mode': 'MyMode'
        \ }
        \ }

function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%') ? expand('%') : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      return fugitive#head()
    endif
  catch
  endtry
  return ''
endfunction

function! MyFileformat()
  return winwidth(0) > 150 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth(0) > 150 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth(0) > 150 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction






"-------------------------------------------------------------------------------
" tcomment_vim
"-------------------------------------------------------------------------------

let g:tcommentMapLeader1 = '<C-_>'     "     (default: '<c-_>')
let g:tcommentMapLeader2 = '<Leader>'  "        (default: '<Leader>_')
" let g:tcommentMapLeaderOp1 = 'gc'      "  (default: 'gc')
" let g:tcommentMapLeaderOp2 = 'gC'      "  (default: 'gC')

" tcommentで使用する形式を追加
if !exists('g:tcomment_types')
  let g:tcomment_types = {}
endif
let g:tcomment_types = {
      \'php_surround' : "<?php %s ?>",
      \'eruby_surround' : "<%% %s %%>",
      \'eruby_surround_minus' : "<%% %s -%%>",
      \'eruby_surround_equality' : "<%%= %s %%>",
\}

" マッピングを追加
"  <C-_>= => <%= %>でトグル
"  <C-_>- => <% -%>でトグル
"  <C-_>c => ファイル形式から、<?php ?>か<% %>でトグル

" function! SetErubyMapping2()
"   nmap <buffer> <C-_>c :TCommentAs eruby_surround<CR>
"   nmap <buffer> <C-_>- :TCommentAs eruby_surround_minus<CR>
"   nmap <buffer> <C-_>= :TCommentAs eruby_surround_equality<CR>
" 
"   vmap <buffer> <C-_>c :TCommentAs eruby_surround<CR>
"   vmap <buffer> <C-_>- :TCommentAs eruby_surround_minus<CR>
"   vmap <buffer> <C-_>= :TCommentAs eruby_surround_equality<CR>
" endfunction
" 
" " erubyのときだけ設定を追加
" au FileType eruby call SetErubyMapping2()



"-------------------------------------------------------------------------------
" IndentGuide
"-------------------------------------------------------------------------------

" hi IndentGuidesOdd  ctermbg=black
" hi IndentGuidesEven ctermbg=darkgrey

"-------------------------------------------------------------------------------

  let g:winresizer_start_key = '<C-b>'
  let g:winresizer_keycode_cancel = 122
  let g:winresizer_vert_resize = 3

" Gundo

let g:gundo_width = 60
let g:gundo_preview_height = 40
let g:gundo_right = 1
nnoremap g; :GundoToggle<CR>




"-------------------------------------------------------------------------------
" vim-browserreload-mac
"-------------------------------------------------------------------------------
" リロード後に戻ってくるアプリ 変更してください
let g:returnApp = "iTerm"
nmap <Space>bc :ChromeReloadStart<CR>
nmap <Space>bC :ChromeReloadStop<CR>
" nmap <Space>bf :FirefoxReloadStart<CR>
" nmap <Space>bF :FirefoxReloadStop<CR>
" nmap <Space>bs :SafariReloadStart<CR>
" nmap <Space>bS :SafariReloadStop<CR>
" nmap <Space>bo :OperaReloadStart<CR>
" nmap <Space>bO :OperaReloadStop<CR>
" nmap <Space>ba :AllBrowserReloadStart<CR>
" nmap <Space>bA :AllBrowserReloadStop<CR>

"-------------------------------------------------------------------------------
" Xdebug
"-------------------------------------------------------------------------------

let g:vdebug_options = {
\    "break_on_open" : 0,
\    "continuous_mode"  : 1,
\}


" Gist

let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1
" let g:gist_open_browser_after_post = 1
" let g:gist_browser_command = 'w3m %URL%'
" let g:gist_show_privates = 1
" let g:gist_post_private = 1
" let g:gist_get_multiplefile = 1
let g:github_api_url = 'https://api.git.gree-dev.net'


set clipboard=unnamed,unnamedplus                                    " OSのクリップボードを使用する
set expandtab                                                        " タブを入力した際に自動でホワイトスペースに展開
set list                                                             " 不可視文字表示
set listchars=tab:▸\ ,trail:_,extends:>,precedes:<,nbsp:%            " 不可視文字の表示形式
set mouse=a                                                          " マウスモード有効
set nomodeline
set nonumber
set noruler
set vb t_vb=                                                         " ビープをならさない
set nowrap                                                           " 折り返ししない
set nowrapscan                                                       " 検索時にファイルの最後まで行ったら最初に戻らないようにする
set shiftwidth=2
set whichwrap=b,s,h,l,<,>,[,]                                        " カーソルを行頭、行末で止まらないようにする
set display=lastline                                                 " 一行の文字数が多くてもきちんと描画
set showmatch
set matchtime=1
"set ttymouse=xterm2                                                 " xtermとscreen対応

autocmd BufRead *.sql set filetype=mysql                                    " .sqlは、mysqlとして扱う
autocmd BufNewFile,BufRead *.md,*.markdown,*.txt setlocal filetype=markdown " デフォルトバッファ、txt,mdは、Markdownとして扱う
autocmd BufNewFile,BufRead *.csv setlocal filetype=txt                      " csvはtxtとして扱う

"-------------------------------------------------------------------------------
" [Keybind]
"-------------------------------------------------------------------------------
command! Ev        edit   $MYVIMRC                      " vimrcの編集
command! Evl       edit   ~/.vimrc.local                " vimrc.localの編集
command! Evlb      edit   ~/.vimrc.local.bundles        " vimrc.local.bundlesの編集
command! Rv        source $MYVIMRC                      " vimrcの反映

" 行末、行の最初への移動のキーマップ設定
:map! <C-e> <Esc>$
:map  <C-e> <Esc>$
" 9で行末へ
noremap 1 ^
noremap 9 $
" 「Ctrl+C」の2回押しでハイライト消去
nmap <C-c><C-c> ;nohlsearch<CR><ESC>
" us key
noremap  ; :
" auto migration Normal Mode
inoremap  ; ;<ESC> 
" 挿入モードにならずに改行できる
noremap <CR> o<ESC>
" Ctrl + c とEscの動作を完全に一致させる
inoremap <C-c> <ESC>

" ファイル保存及びsyntax check(バッファ変更時のみ)
nnoremap <silent> <Space>s     :<C-u>update<CR>
" tmpでファイル保存
nnoremap <silent> <Space>t     :save! ~/dropbox/.tmp/tmp.md<CR>
" syntax check
nnoremap <silent> <Leader>s    :<C-u>SyntasticCheck<CR>

" space + ? で各種設定をトグル
nnoremap <silent> <Space><S-s> :setl spell!<CR>:setl spell?<CR>
nnoremap <silent> <Space>l     :setl list!<CR>:setl list?<CR>
" nnoremap <silent> <Space>t     :setl expandtab!<CR>:setl expandtab?<CR>
nnoremap <silent> <Space>n     :setl number!<CR>:setl number?<CR>
nnoremap <silent> <Space>w     :setl wrap!<CR>:setl wrap?<CR>

" 行末までをヤンク
nnoremap Y y$

nmap <C-l> >>
nmap <C-h> <<

" map <C-a> <Esc>^
map! <C-b> <Esc>h
map! <C-f> <Esc>l
map  <C-b> <Left>
map  <C-f> <Right>

" タブ移動を直感的に
noremap gh gT
noremap gl gt

 " C-j, C-kで1行スクロール
noremap <C-j> <C-e>
noremap <C-k> <C-y>


" paste yanked string vertically。<C-v> 時に<C-p> でvertical に paste
vnoremap <C-p> I<C-r>"<ESC><ESC>

" visualモードで置き換えたい文字を選択した後、「p」で0のレジスターを使用する(visualモードで選択したあとに、ヤンクした文字をペーストするとその置き換えた文字がヤンクされてしまい2回目同じようにしようとすると、前回置き換えた文字がペーストされてしまうので）
vnoremap <silent> p "0p<CR>

" qでウインドウを閉じて Qでマクロ
nnoremap q :<C-u>q<CR>
nnoremap Q q

"" カッコやクオートなどを入力した際に左に自動で移動します
inoremap {} {}<Left>
inoremap [] []<Left>
inoremap () ()<Left>
inoremap "" ""<Left>
inoremap '' ''<Left>
inoremap <> <><left>
"  inoremap `` ``<left>

" j, k による移動を折り返されたテキストでも自然に振る舞うように変更
nnoremap j gj
nnoremap k gk

inoremap <C-d> $
inoremap <C-a> @
inoremap <C-j> _
inoremap <C-l> ()<Left>

"-------- コマンドラインでのキーバインド
" Ctrl+Aで行頭へ移動
:cnoremap <C-A>		<Home>
" Ctrl+Bで一文字戻る
:cnoremap <C-B>		<Left>
" Ctrl+Dでカーソルの下の文字を削除
:cnoremap <C-D>		<Del>
" Ctrl+Eで行末へ移動
:cnoremap <C-E>		<End>
" Ctrl+Fで一文字進む
:cnoremap <C-F>		<Right>
" Ctrl+Nでコマンドライン履歴を一つ進む
:cnoremap <C-N>		<Down>
" Ctrl+Pでコマンドライン履歴を一つ戻る
:cnoremap <C-P>		<Up>


" molokai add setting
let g:molokai_original = 1
let g:rehash256 = 1
autocmd colorscheme molokai highlight Visual ctermbg=8
colorscheme molokai  " カラースキーマ molokai 指定


" marks {{{
" NeoBundle 'jacquesbh/vim-showmarks'
" NeoBundle 'tacroe/unite-mark'
" set viminfo='50,\"1000,:0,n~/.vim/viminfo
" set foldmethod=marker
" let g:showmarks_marks_notime = 1
" let g:unite_source_mark_marks = '01abcABCDEFGHIJKLNMOPQRSTUVWXYZ'
" let g:showmarks_enable       = 0
" if !exists('g:markrement_char')
"     let g:markrement_char = [
"     \     'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
"     \     'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
"     \     'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
"     \     'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
"     \     '0'
"     \ ]
" en
" 
" fu! s:AutoMarkrement()
"     if !exists('b:markrement_pos')
"         let b:markrement_pos = 0
"     else
"         let b:markrement_pos = (b:markrement_pos + 1) % len(g:markrement_char)
"     en
"     exe 'mark' g:markrement_char[b:markrement_pos]
"     echo 'marked' g:markrement_char[b:markrement_pos]
" endf
" 
" aug show-marks-sync
"         au!
"         au BufReadPost * sil! ShowMarksOnce
" aug END
" 
" nn [Mark] <Nop>
" nm <leader>m [Mark]
" nn <silent> [Mark]m :Unite mark<CR>
" nn [Mark] :<C-u>call <SID>AutoMarkrement()<CR><CR>:ShowMarksOnce<CR>
" com! -bar MarksDelete sil :delm! | :delm 0-9A-Z | :wv! | :ShowMarksOnce
" nn <silent>[Mark]d :MarksDelete<CR>
  " }}}

"" JQコマンドでJSONをパース
command! -nargs=? Jq call s:Jq(<f-args>)
function! s:Jq(...)
  if 0 == a:0
    let l:arg = "."
  else
    let l:arg = a:1
  endif
  execute "%! cat % | jq \"" . l:arg . "\""
endfunction


if &diff " ignore white-space
    set diffopt+=iwhite
endif

"-------------------------------------------------------------------------------
" インデント Indent
"-------------------------------------------------------------------------------
set autoindent   " 自動でインデント
set smartindent  " 新しい行を開始したときに、新しい行のインデントを現在行と同じ量にする。
set cindent      " Cプログラムファイルの自動インデントを始める
set tabstop=2 shiftwidth=2 softtabstop=0 " softtabstopはTabキー押し下げ時の挿入される空白の量，0の場合はtabstopと同じ，BSにも影響する
" 連続インデント
vnoremap < <gv
vnoremap > >gv
if has("autocmd")
  filetype plugin on
  filetype indent on
  autocmd FileType apache     setlocal sw=4 sts=4 ts=4 et
  autocmd FileType aspvbs     setlocal sw=4 sts=4 ts=4 et
  autocmd FileType c          setlocal sw=4 sts=4 ts=4 et
  autocmd FileType cpp        setlocal sw=4 sts=4 ts=4 et
  autocmd FileType cs         setlocal sw=4 sts=4 ts=4 et
  autocmd FileType css        setlocal sw=2 sts=2 ts=2 et
  autocmd FileType diff       setlocal sw=4 sts=4 ts=4 et
  autocmd FileType eruby      setlocal sw=4 sts=4 ts=4 et
  autocmd FileType html       setlocal sw=2 sts=2 ts=2 et
  autocmd FileType java       setlocal sw=4 sts=4 ts=4 et
  autocmd FileType javascript setlocal sw=2 sts=2 ts=2 et
  autocmd FileType perl       setlocal sw=4 sts=4 ts=4 et
  autocmd FileType php        setlocal sw=4 sts=4 ts=4 et
  autocmd FileType python     setlocal sw=4 sts=4 ts=4 et
  autocmd FileType ruby       setlocal sw=2 sts=2 ts=2 et
  autocmd FileType haml       setlocal sw=2 sts=2 ts=2 et
  autocmd FileType sh         setlocal sw=4 sts=4 ts=4 et
  autocmd FileType sql        setlocal sw=4 sts=4 ts=4 et
  autocmd FileType vb         setlocal sw=4 sts=4 ts=4 et
  autocmd FileType vim        setlocal sw=2 sts=2 ts=2 et
  autocmd FileType wsh        setlocal sw=4 sts=4 ts=4 et
  autocmd FileType xhtml      setlocal sw=4 sts=4 ts=4 et
  autocmd FileType xml        setlocal sw=4 sts=4 ts=4 et
  autocmd FileType yaml       setlocal sw=2 sts=2 ts=2 et
  autocmd FileType zsh        setlocal sw=4 sts=4 ts=4 et
  autocmd FileType scala      setlocal sw=2 sts=2 ts=2 et
endif

